[{"/mnt/workspace/01-Gits/01-JavaScript/REACT/chatfire/src/App.tsx":"1"},{"size":4043,"mtime":1608377534641,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"wt8z2k","/mnt/workspace/01-Gits/01-JavaScript/REACT/chatfire/src/App.tsx",["7","8"],"import React, { useRef, useState } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\ninterface User {\n  uid: string;\n  photoUrl?: string;\n}\ninterface Message {\n  id: string;\n  text?: string;\n  uid: string;\n  photoUrl?: string;\n}\ninterface ChatMsgProps {\n  message: Message;\n}\nconsole.log('env', process.env);\n\nconsole.log('apikey', process.env.REACT_APP_FIREBASE_API_KEY);\nconsole.log('domain', process.env.REACT_APP_FIREBASE_AUTH_DOMAINY);\nconsole.log('projectid', process.env.REACT_APP_FIREBASE_PROJECT_ID);\nconsole.log('storage', process.env.REACT_APP_FIREBASE_STORAGE_BUCKET);\nconsole.log('sender', process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID);\nconsole.log('app_id', process.env.REACT_APP_FIREBASE_APP_ID);\nconsole.log('measure', process.env.REACT_APP_FIREBASE_MEASUREMENT_ID);\n\nfirebase.initializeApp({\n  // firebase configure\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n  return (\n    <div className='App'>\n      <header>\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return (\n    <>\n      <button className='sign-in' onClick={signInWithGoogle}>\n        Sign in with Google\n      </button>\n      <p>\n        Do not violate the community guidelines or you will be banned for life!\n      </p>\n    </>\n  );\n}\n\nfunction SignOut() {\n  return (\n    auth.currentUser && (\n      <button className='sign-out' onClick={() => auth.signOut()}>\n        Sign Out\n      </button>\n    )\n  );\n}\n\nfunction ChatRoom() {\n  const dummy = useRef<null | HTMLElement>(null);\n  const messageRef = firestore.collection('message');\n  const query = messageRef.orderBy('createAt').limit(100);\n  const [messages] = useCollectionData<Message>(query, { idField: 'id' });\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async (e: any) => {\n    e.preventDefault();\n    const { uid, photoUrl } = auth.currentUser as User;\n    await messageRef.add({\n      text: formValue,\n      createAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoUrl,\n    });\n    setFormValue('');\n    dummy.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n\n        <span ref={dummy}></span>\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n          placeholder='say something nice'\n        />\n\n        <button type='submit' disabled={!formValue}>\n          üïäÔ∏è\n        </button>\n      </form>\n    </>\n  );\n}\n\nfunction ChatMessage(props: ChatMsgProps) {\n  const { text, uid, photoUrl } = props.message;\n  const messageClass = uid == auth.currentUser?.uid ? 'sent' : 'received';\n\n  return (\n    <>\n      <div className={`message ${messageClass}`}>\n        <img\n          alt='avatar'\n          src={\n            photoUrl || 'https://api.adorable.io/avatars/23/abott@adorable.p'\n          }\n        />\n        <p>{text}</p>\n      </div>\n    </>\n  );\n}\nexport default App;\n",{"ruleId":"9","severity":1,"message":"10","line":47,"column":7,"nodeType":"11","messageId":"12","endLine":47,"endColumn":16},{"ruleId":"13","severity":1,"message":"14","line":137,"column":28,"nodeType":"15","messageId":"16","endLine":137,"endColumn":30},"@typescript-eslint/no-unused-vars","'analytics' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]